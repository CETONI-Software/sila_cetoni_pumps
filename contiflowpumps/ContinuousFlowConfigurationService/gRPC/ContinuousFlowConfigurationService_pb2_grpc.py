# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ContinuousFlowConfigurationService_pb2 as ContinuousFlowConfigurationService__pb2


class ContinuousFlowConfigurationServiceStub(object):
    """Feature: Continuous Flow Configuration Service
    Allows to configure the parameters of a continuous flow pump.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetSwitchingMode = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetSwitchingMode',
                request_serializer=ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Responses.FromString,
                )
        self.SetRefillFlowRate = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetRefillFlowRate',
                request_serializer=ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Responses.FromString,
                )
        self.SetCrossFlowDuration = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetCrossFlowDuration',
                request_serializer=ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Responses.FromString,
                )
        self.SetOverlapDuration = channel.unary_unary(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetOverlapDuration',
                request_serializer=ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Responses.FromString,
                )
        self.Subscribe_SwitchingMode = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_SwitchingMode',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Responses.FromString,
                )
        self.Subscribe_MaxRefillFlowRate = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_MaxRefillFlowRate',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Responses.FromString,
                )
        self.Subscribe_RefillFlowRate = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_RefillFlowRate',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Responses.FromString,
                )
        self.Subscribe_MinFlowRate = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_MinFlowRate',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Responses.FromString,
                )
        self.Subscribe_CrossFlowDuration = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_CrossFlowDuration',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Responses.FromString,
                )
        self.Subscribe_OverlapDuration = channel.unary_stream(
                '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_OverlapDuration',
                request_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Parameters.SerializeToString,
                response_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Responses.FromString,
                )


class ContinuousFlowConfigurationServiceServicer(object):
    """Feature: Continuous Flow Configuration Service
    Allows to configure the parameters of a continuous flow pump.
    """

    def SetSwitchingMode(self, request, context):
        """Set Switching Mode
        Sets the switching mode for syringe pump switchover if one syringe pump runs empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRefillFlowRate(self, request, context):
        """Set Refill Flow Rate
        Set the refill flow rate for the continuous flow pump. The refill flow speed limits the maximum flow that is possible
        with a contiflow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCrossFlowDuration(self, request, context):
        """Set Cross Flow Duration
        Set the cross flow duration for the continuous flow pump. The cross flow duration is the time the pump running empty
        decelerates while the filled pump accelerates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOverlapDuration(self, request, context):
        """Set Overlap Duration
        Set the overlap duration for the continuous flow pump. The overlap duration is a time the refilled pump will start
        earlier than the empty pump stops. You can use this time to ensure that the system is already pressurized when switching
        over.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_SwitchingMode(self, request, context):
        """Switching Mode
        Get the switching mode for syringe pump switchover if one syringe pump runs empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_MaxRefillFlowRate(self, request, context):
        """Max Refill Flow Rate
        Get the maximum possible refill flow rate for the continuous flow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_RefillFlowRate(self, request, context):
        """Refill Flow Rate
        Get the refill flow rate for the continuous flow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_MinFlowRate(self, request, context):
        """Min Flow Rate
        Get the minimum flow rate that is theoretically posible with the continuous flow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_CrossFlowDuration(self, request, context):
        """Cross Flow Duration
        Get the cross flow duration for the continuous flow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_OverlapDuration(self, request, context):
        """Overlap Duration
        Get the overlap duration for the continuous flow pump.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContinuousFlowConfigurationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetSwitchingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSwitchingMode,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Responses.SerializeToString,
            ),
            'SetRefillFlowRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRefillFlowRate,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Responses.SerializeToString,
            ),
            'SetCrossFlowDuration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCrossFlowDuration,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Responses.SerializeToString,
            ),
            'SetOverlapDuration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOverlapDuration,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Responses.SerializeToString,
            ),
            'Subscribe_SwitchingMode': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_SwitchingMode,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Responses.SerializeToString,
            ),
            'Subscribe_MaxRefillFlowRate': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_MaxRefillFlowRate,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Responses.SerializeToString,
            ),
            'Subscribe_RefillFlowRate': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_RefillFlowRate,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Responses.SerializeToString,
            ),
            'Subscribe_MinFlowRate': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_MinFlowRate,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Responses.SerializeToString,
            ),
            'Subscribe_CrossFlowDuration': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_CrossFlowDuration,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Responses.SerializeToString,
            ),
            'Subscribe_OverlapDuration': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_OverlapDuration,
                    request_deserializer=ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Parameters.FromString,
                    response_serializer=ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContinuousFlowConfigurationService(object):
    """Feature: Continuous Flow Configuration Service
    Allows to configure the parameters of a continuous flow pump.
    """

    @staticmethod
    def SetSwitchingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetSwitchingMode',
            ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.SetSwitchingMode_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRefillFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetRefillFlowRate',
            ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.SetRefillFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCrossFlowDuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetCrossFlowDuration',
            ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.SetCrossFlowDuration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOverlapDuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/SetOverlapDuration',
            ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.SetOverlapDuration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_SwitchingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_SwitchingMode',
            ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_SwitchingMode_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_MaxRefillFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_MaxRefillFlowRate',
            ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_MaxRefillFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_RefillFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_RefillFlowRate',
            ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_RefillFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_MinFlowRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_MinFlowRate',
            ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_MinFlowRate_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_CrossFlowDuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_CrossFlowDuration',
            ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_CrossFlowDuration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_OverlapDuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.pumps.contiflowpumps.continuousflowconfigurationservice.v1.ContinuousFlowConfigurationService/Subscribe_OverlapDuration',
            ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Parameters.SerializeToString,
            ContinuousFlowConfigurationService__pb2.Subscribe_OverlapDuration_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
