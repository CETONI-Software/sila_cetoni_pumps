"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Pump Drive Control Service*

:details: PumpDriveControlService:
    Functionality to control and maintain the drive that drives the pump.
    Allows to initialize a pump (e.g. by executing a reference move) and obtain status information about the pump
    drive's current state (i.e. enabled/disabled).
    The initialization has to be successful in order for the pump to work correctly and dose fluids. If the
    initialization fails, the DefinedExecutionError InitializationFailed is thrown.

:file:    PumpDriveControlService_servicer.py
:authors: Florian Meinicke

:date: (creation)          2019-07-16T11:11:31.273777
:date: (last modification) 2019-10-05T11:53:30.804218

.. note:: Code generated by SiLA2CodeGenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.0.1"

# import general packages
import logging
import grpc

# meta packages
from typing import Union

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import PumpDriveControlService_pb2 as PumpDriveControlService_pb2
from .gRPC import PumpDriveControlService_pb2_grpc as PumpDriveControlService_pb2_grpc

# import SiLA errors
import neMESYS_errors

# import simulation and real implementation
from .PumpDriveControlService_simulation import PumpDriveControlServiceSimulation
from .PumpDriveControlService_real import PumpDriveControlServiceReal


class PumpDriveControlService(PumpDriveControlService_pb2_grpc.PumpDriveControlServiceServicer):
    """
    This is a sample service for controlling neMESYS syringe pumps via SiLA2
    """
    implementation: Union[PumpDriveControlServiceSimulation, PumpDriveControlServiceReal]
    simulation_mode: bool

    def __init__(self, pump, sila2_conf, simulation_mode: bool = True):
        """
        Class initialiser.

        :param pump: A valid `qxmixpump` for this service to use
        :param sila2_conf: The config of the server
        :param simulation_mode: Sets whether at initialisation the simulation mode is active or the real mode
        """

        self.pump = pump
        self.sila2_conf = sila2_conf

        self.simulation_mode = simulation_mode
        if simulation_mode:
            self.switch_to_simulation_mode()
        else:
            self.switch_to_real_mode()

    def _inject_implementation(self,
                               implementation: Union[PumpDriveControlServiceSimulation,
                                                     PumpDriveControlServiceReal]
                               ) -> bool:
        """
        Dependency injection of the implementation used.
            Allows to set the class used for simulation/real mode.

        :param implementation: A valid implementation of the neMESYSServicer.
        """

        self.implementation = implementation
        return True

    def switch_to_simulation_mode(self):
        """Method that will automatically be called by the server when the simulation mode is requested."""
        self.simulation_mode = True
        self._inject_implementation(PumpDriveControlServiceSimulation())

    def switch_to_real_mode(self):
        """Method that will automatically be called by the server when the real mode is requested."""
        self.simulation_mode = False
        self._inject_implementation(PumpDriveControlServiceReal(self.pump, self.sila2_conf))

    def InitializePumpDrive(self, request, context: grpc.ServicerContext) \
            -> PumpDriveControlService_pb2.InitializePumpDrive_Responses:
        """
        Executes the unobservable command "Initialize Pump Drive"
            Initialize the pump drive (e.g. by executing a reference move).

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "InitializePumpDrive called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.InitializePumpDrive(request, context)
        except neMESYS_errors.DeviceError as err:
            err = neMESYS_errors.QmixSDKError(err)
            err.raise_rpc_error(context)

    def EnablePumpDrive(self, request, context: grpc.ServicerContext) \
            -> PumpDriveControlService_pb2.EnablePumpDrive_Responses:
        """
        Executes the unobservable command "Enable Pump Drive"
            Set the pump into enabled state.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "EnablePumpDrive called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.EnablePumpDrive(request, context)
        except neMESYS_errors.DeviceError as err:
            err = neMESYS_errors.QmixSDKError(err)
            err.raise_rpc_error(context)

    def DisablePumpDrive(self, request, context: grpc.ServicerContext) \
            -> PumpDriveControlService_pb2.DisablePumpDrive_Responses:
        """
        Executes the unobservable command "Disable Pump Drive"
            Set the pump into disabled state.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        logging.debug(
            "DisablePumpDrive called in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.DisablePumpDrive(request, context)
        except neMESYS_errors.DeviceError as err:
            err = neMESYS_errors.QmixSDKError(err)
            err.raise_rpc_error(context)

    def Subscribe_PumpDriveState(self, request, context: grpc.ServicerContext) \
            -> PumpDriveControlService_pb2.Subscribe_PumpDriveState_Responses:
        """
        Requests the observable property Pump Drive State
            The current state of the pump. This is either enabled (true) or disabled (false). Only if the sate is enabled, the pump can dose fluids.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.PumpDriveState (Pump Drive State): The current state of the pump. This is either enabled (true) or disabled (false). Only if the sate is enabled, the pump can dose fluids.
        """

        logging.debug(
            "Property PumpDriveState requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.Subscribe_PumpDriveState(request, context)
        except neMESYS_errors.DeviceError as err:
            err = neMESYS_errors.QmixSDKError(err)
            err.raise_rpc_error(context)


    def Subscribe_FaultState(self, request, context: grpc.ServicerContext) \
            -> PumpDriveControlService_pb2.Subscribe_FaultState_Responses:
        """
        Requests the observable property Fault State
            Returns if the pump is in fault state. If the value is true (i.e. the pump is in fault state), it can be cleared by calling EnablePumpDrive.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response stream with the following fields:
            request.FaultState (Fault State): Returns if the pump is in fault state. If the value is true (i.e. the pump is in fault state), it can be cleared by calling EnablePumpDrive.
        """

        logging.debug(
            "Property FaultState requested in {current_mode} mode".format(
                current_mode=('simulation' if self.simulation_mode else 'real')
            )
        )

        try:
            return self.implementation.Subscribe_FaultState(request, context)
        except neMESYS_errors.DeviceError as err:
            err = neMESYS_errors.QmixSDKError(err)
            err.raise_rpc_error(context)
