# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ShutdownController_pb2 as ShutdownController__pb2
import sila2lib.framework.SiLAFramework_pb2 as SiLAFramework__pb2


class ShutdownControllerStub(object):
  """Feature: Shutdown Controller

  Provides a generic way of telling a SiLA2 server that it is about to be shut down. The server implements a
  routine to be executed before the hardware is shut down (e.g. saving device paramters or bringing the device into a safe
  position).

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Shutdown = channel.unary_unary(
        '/sila2.de.cetoni.pumps.syringepumps.shutdowncontroller.v1.ShutdownController/Shutdown',
        request_serializer=ShutdownController__pb2.Shutdown_Parameters.SerializeToString,
        response_deserializer=SiLAFramework__pb2.CommandConfirmation.FromString,
        )
    self.Shutdown_Info = channel.unary_stream(
        '/sila2.de.cetoni.pumps.syringepumps.shutdowncontroller.v1.ShutdownController/Shutdown_Info',
        request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
        response_deserializer=SiLAFramework__pb2.ExecutionInfo.FromString,
        )
    self.Shutdown_Result = channel.unary_unary(
        '/sila2.de.cetoni.pumps.syringepumps.shutdowncontroller.v1.ShutdownController/Shutdown_Result',
        request_serializer=SiLAFramework__pb2.CommandExecutionUUID.SerializeToString,
        response_deserializer=ShutdownController__pb2.Shutdown_Responses.FromString,
        )


class ShutdownControllerServicer(object):
  """Feature: Shutdown Controller

  Provides a generic way of telling a SiLA2 server that it is about to be shut down. The server implements a
  routine to be executed before the hardware is shut down (e.g. saving device paramters or bringing the device into a safe
  position).

  """

  def Shutdown(self, request, context):
    """Shutdown

    Initiates the shutdown routine. If no errors occured during the shutdown process the server should be
    considered ready to be physically shutdown (i.e. the device can be shut down/powered off).

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Shutdown_Info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Shutdown_Result(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ShutdownControllerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Shutdown': grpc.unary_unary_rpc_method_handler(
          servicer.Shutdown,
          request_deserializer=ShutdownController__pb2.Shutdown_Parameters.FromString,
          response_serializer=SiLAFramework__pb2.CommandConfirmation.SerializeToString,
      ),
      'Shutdown_Info': grpc.unary_stream_rpc_method_handler(
          servicer.Shutdown_Info,
          request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
          response_serializer=SiLAFramework__pb2.ExecutionInfo.SerializeToString,
      ),
      'Shutdown_Result': grpc.unary_unary_rpc_method_handler(
          servicer.Shutdown_Result,
          request_deserializer=SiLAFramework__pb2.CommandExecutionUUID.FromString,
          response_serializer=ShutdownController__pb2.Shutdown_Responses.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sila2.de.cetoni.pumps.syringepumps.shutdowncontroller.v1.ShutdownController', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
