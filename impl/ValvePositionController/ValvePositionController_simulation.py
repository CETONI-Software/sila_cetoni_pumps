"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Valve Position Controller*

:details: ValvePositionController:
    Allows to specify a certain logical position for a valve. The Position property can be querried at any time to
    obtain the current valve position.

:file:    ValvePositionController_simulation.py
:authors: Florian Meinicke

:date: (creation)          2019-07-16T11:11:31.316514
:date: (last modification) 2019-10-05T11:53:30.858414

.. note:: Code generated by SiLA2CodeGenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.0.1"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import ValvePositionController_pb2 as ValvePositionController_pb2
# from .gRPC import ValvePositionController_pb2_grpc as ValvePositionController_pb2_grpc

# import default arguments
from .ValvePositionController_default_arguments import default_dict


# noinspection PyPep8Naming,PyUnusedLocal
class ValvePositionControllerSimulation:
    """
    Implementation of the *Valve Position Controller* in *Simulation* mode
        This is a sample service for controlling neMESYS syringe pumps via SiLA2
    """

    def __init__(self):
        """Class initialiser"""

        logging.debug('Started server in mode: {mode}'.format(mode='Simulation'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(
                command_progress if command_progress is not None else None
            ),
            estimatedRemainingTime=(
                command_estimated_remaining if command_estimated_remaining is not None else None
            ),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None
            )
        )

    def SwitchToPosition(self, request, context: grpc.ServicerContext) \
            -> ValvePositionController_pb2.SwitchToPosition_Responses:
        """
        Executes the unobservable command "Switch To Position"
            Switches the valve to the specified position. The given position has to be less than the NumberOfPositions or else a ValidationError is thrown.
    
        :param request: gRPC request containing the parameters passed:
            request.Position (Position): The target position that the valve should be switched to.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Simulation for command SwitchToPosition here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ValvePositionController_pb2.SwitchToPosition_Responses(
                **default_dict['SwitchToPosition_Responses']
            )
    
        return return_value
    
    
    def TogglePosition(self, request, context: grpc.ServicerContext) \
            -> ValvePositionController_pb2.TogglePosition_Responses:
        """
        Executes the unobservable command "Toogle Position"
            This command only applies for 2-way valves to toggle between its two different positions. If the command is called for any other valve type a ValveNotToggleable error is thrown.
    
        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: The return object defined for the command with the following fields:
            request.EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """
    
        # initialise the return value
        return_value = None
    
        # TODO:
        #   Add implementation of Simulation for command TogglePosition here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ValvePositionController_pb2.TogglePosition_Responses(
                **default_dict['TogglePosition_Responses']
            )
    
        return return_value
    

    def Get_NumberOfPositions(self, request, context: grpc.ServicerContext) \
            -> ValvePositionController_pb2.Get_NumberOfPositions_Responses:
        """
        Requests the unobservable property Number Of Positions
            The number of the valve positions available.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.NumberOfPositions (Number Of Positions): The number of the valve positions available.
        """
    
        # initialise the return value
        return_value: ValvePositionController_pb2.Get_NumberOfPositions_Responses = None
    
        # TODO:
        #   Add implementation of Simulation for property NumberOfPositions here and write the resulting response
        #   in return_value
    
        # fallback to default
        if return_value is None:
            return_value = ValvePositionController_pb2.Get_NumberOfPositions_Responses(
                **default_dict['Get_NumberOfPositions_Responses']
            )
    
        return return_value
    
    def Subscribe_Position(self, request, context: grpc.ServicerContext) \
            -> ValvePositionController_pb2.Subscribe_Position_Responses:
        """
        Requests the observable property Position
            The current logical valve position. This is a value between 0 and NumberOfPositions - 1.
    
        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information
    
        :returns: A response object with the following fields:
            request.Position (Position): The current logical valve position. This is a value between 0 and NumberOfPositions - 1.
        """
    
        # initialise the return value
        return_value: ValvePositionController_pb2.Subscribe_Position_Responses = None
    
        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property Position here and write the resulting
            #   response in return_value
    
            # create the default value
            if return_value is None:
                return_value = ValvePositionController_pb2.Subscribe_Position_Responses(
                    **default_dict['Subscribe_Position_Responses']
                )
    
    
            yield return_value
    
