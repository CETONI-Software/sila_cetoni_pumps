// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2019-10-05 17:59:19
// 
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1;

// Feature: Pump Drive Control Service
//   
//           Functionality to control and maintain the drive that drives the pump.
//           Allows to initialize a pump (e.g. by executing a reference move) and obtain status information about the pump
//   drive's current state (i.e. enabled/disabled).
//           The initialization has to be successful in order for the pump to work correctly and dose fluids. If the
//   initialization fails, the DefinedExecutionError InitializationFailed is thrown.
//   
service PumpDriveControlService {
    // Initialize Pump Drive
    //   Initialize the pump drive (e.g. by executing a reference move).
    rpc InitializePumpDrive(sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.InitializePumpDrive_Parameters) returns (sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.InitializePumpDrive_Responses) {}
    // Enable Pump Drive
    //   Set the pump into enabled state.
    rpc EnablePumpDrive(sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.EnablePumpDrive_Parameters) returns (sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.EnablePumpDrive_Responses) {}
    // Disable Pump Drive
    //   Set the pump into disabled state.
    rpc DisablePumpDrive(sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.DisablePumpDrive_Parameters) returns (sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.DisablePumpDrive_Responses) {}
    // Pump Drive State
    //   The current state of the pump. This is either enabled (true) or disabled (false). Only if the sate is enabled, the pump
    //   can dose fluids.
    rpc Subscribe_PumpDriveState(sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.Subscribe_PumpDriveState_Parameters) returns (stream sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.Subscribe_PumpDriveState_Responses) {}
    // Fault State
    //   Returns if the pump is in fault state. If the value is true (i.e. the pump is in fault state), it can be cleared by
    //   calling EnablePumpDrive.
    rpc Subscribe_FaultState(sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.Subscribe_FaultState_Parameters) returns (stream sila2.de.cetoni.pumps.syringepumps.pumpdrivecontrolservice.v1.Subscribe_FaultState_Responses) {}
    
}

// ----------------- Data Type definitions -----------------


// ------ Command Parameter and Response definitions -------
message InitializePumpDrive_Parameters {
    
}

message InitializePumpDrive_Responses {
    
}

message EnablePumpDrive_Parameters {
    
}

message EnablePumpDrive_Responses {
    
}

message DisablePumpDrive_Parameters {
    
}

message DisablePumpDrive_Responses {
    
}
message Subscribe_PumpDriveState_Parameters {
    // Empty message
}

message Subscribe_PumpDriveState_Responses {
    sila2.org.silastandard.Boolean PumpDriveState = 1;
}

message Subscribe_FaultState_Parameters {
    // Empty message
}

message Subscribe_FaultState_Responses {
    sila2.org.silastandard.Boolean FaultState = 1;
}

// ----------------- Metadata Definitions ------------------
