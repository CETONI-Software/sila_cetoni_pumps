# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

import math
from functools import partial

from qmixsdk.qmixpump import Pump
from sila2.server import MetadataDict, SilaServer

from sila_cetoni.application.system import ApplicationSystem, CetoniApplicationSystem
from sila_cetoni.utils import PropertyUpdater, negate

from ..generated.forcemonitoringservice import (
    ClearForceSafetyStop_Responses,
    DisableForceMonitoring_Responses,
    EnableForceMonitoring_Responses,
    Force,
    ForceMonitoringServiceBase,
    ForceMonitoringServiceFeature,
    SetForceLimit_Responses,
)


@CetoniApplicationSystem.monitor_traffic
class ForceMonitoringServiceImpl(ForceMonitoringServiceBase):
    __pump: Pump

    def __init__(self, server: SilaServer, pump: Pump):
        super().__init__(server)
        self.__pump = pump

        not_close = negate(math.isclose)

        self.run_periodically(PropertyUpdater(self.__pump.get_force_limit, not_close, self.update_ForceLimit))
        self.run_periodically(
            PropertyUpdater(self.__pump.is_force_monitoring_enabled, not_close, self.update_ForceMonitoringEnabled)
        )
        self.run_periodically(
            PropertyUpdater(self.__pump.is_force_safety_stop_active, not_close, self.update_ForceSafetyStopActive)
        )
        self.run_periodically(
            PropertyUpdater(
                self.__pump.read_force_sensor, partial(not_close, abs_tol=1.0e-3), self.update_ForceSensorValue
            )
        )
        self.run_periodically(PropertyUpdater(self.__pump.get_max_device_force, not_close, self.update_MaxDeviceForce))

    @ApplicationSystem.ensure_operational(ForceMonitoringServiceFeature)
    def ClearForceSafetyStop(self, *, metadata: MetadataDict) -> ClearForceSafetyStop_Responses:
        self.__pump.clear_force_safety_stop()

    @ApplicationSystem.ensure_operational(ForceMonitoringServiceFeature)
    def EnableForceMonitoring(self, *, metadata: MetadataDict) -> EnableForceMonitoring_Responses:
        self.__pump.enable_force_monitoring(True)

    @ApplicationSystem.ensure_operational(ForceMonitoringServiceFeature)
    def DisableForceMonitoring(self, *, metadata: MetadataDict) -> DisableForceMonitoring_Responses:
        self.__pump.enable_force_monitoring(False)

    @ApplicationSystem.ensure_operational(ForceMonitoringServiceFeature)
    def SetForceLimit(self, ForceLimit: Force, *, metadata: MetadataDict) -> SetForceLimit_Responses:
        self.__pump.write_force_limit(ForceLimit)
