# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

import logging
from collections import namedtuple
from typing import Any

from qmixsdk.qmixpump import Pump
from sila2.server import MetadataDict, SilaServer

from sila_cetoni.application.server_configuration import ServerConfiguration
from sila_cetoni.application.system import ApplicationSystem, CetoniApplicationSystem
from sila_cetoni.utils import PropertyUpdater, not_equal

from ..... import unit_conversion as uc
from ..generated.pumpunitcontroller import (
    FlowUnit,
    PumpUnitControllerBase,
    PumpUnitControllerFeature,
    SetFlowUnit_Responses,
    SetVolumeUnit_Responses,
    VolumeUnit,
)

logger = logging.getLogger(__name__)


@CetoniApplicationSystem.monitor_traffic
class PumpUnitControllerImpl(PumpUnitControllerBase):
    __pump: Pump
    __system: ApplicationSystem
    __config: ServerConfiguration

    def __init__(self, server: SilaServer, pump: Pump):
        super().__init__(server)
        self.__pump = pump
        self.__system = ApplicationSystem()
        self.__config = ServerConfiguration(self.parent_server.server_name, self.__system.device_config.name)

        self.run_periodically(
            PropertyUpdater(
                lambda: FlowUnit(*uc.flow_unit_to_tuple(self.__pump.get_flow_unit())),
                not_equal,
                self.update_FlowUnit,
                when=self.__system.state.is_operational,
            )
        )
        self.run_periodically(
            PropertyUpdater(
                lambda: uc.volume_unit_to_string(self.__pump.get_volume_unit()),
                not_equal,
                self.update_VolumeUnit,
                when=self.__system.state.is_operational,
            )
        )

    def start(self) -> None:
        try:
            self.SetFlowUnit(FlowUnit(*self.__config["pump"]["flow_unit"].split("/")), metadata={})
        except KeyError:
            logger.warning(
                f"Restoring flow unit failed for {self.parent_server.server_name} - could not read value from config file!"
            )
        try:
            self.SetVolumeUnit(self.__config["pump"]["volume_unit"], metadata={})
        except KeyError:
            logger.warning(
                f"Restoring volume unit failed for {self.parent_server.server_name} - could not read value from config file!"
            )

        super().start()

    @ApplicationSystem.ensure_operational(PumpUnitControllerFeature)
    def SetFlowUnit(self, FlowUnit: FlowUnit, *, metadata: MetadataDict) -> SetFlowUnit_Responses:
        logger.debug(f"flow unit {FlowUnit} {type(FlowUnit)}")

        flow_unit = FlowUnit
        prefix, volume_unit, time_unit = uc.evaluate_units(
            parameter=PumpUnitControllerFeature["SetFlowUnit"].parameters.fields[0],
            requested_volume_unit=flow_unit.VolumeUnit,
            requested_time_unit=flow_unit.TimeUnit,
        )
        self.__pump.set_flow_unit(prefix, volume_unit, time_unit)
        self.__config["pump"]["flow_unit"] = f"{flow_unit.VolumeUnit}/{flow_unit.TimeUnit}"
        self.__config.write()

    @ApplicationSystem.ensure_operational(PumpUnitControllerFeature)
    def SetVolumeUnit(self, VolumeUnit: VolumeUnit, *, metadata: MetadataDict) -> SetVolumeUnit_Responses:
        prefix, volume_unit = uc.evaluate_units(
            parameter=PumpUnitControllerFeature["SetVolumeUnit"].parameters.fields[0], requested_volume_unit=VolumeUnit
        )
        self.__pump.set_volume_unit(prefix, volume_unit)
        self.__config["pump"]["volume_unit"] = VolumeUnit
        self.__config.write()
