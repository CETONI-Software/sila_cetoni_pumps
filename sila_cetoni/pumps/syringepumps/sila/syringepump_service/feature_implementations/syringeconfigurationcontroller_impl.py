# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

import logging
import math
from queue import Queue
from typing import Optional

from qmixsdk.qmixpump import Pump
from sila2.framework.errors.validation_error import ValidationError
from sila2.server import MetadataDict, SilaServer

from sila_cetoni.application.server_configuration import ServerConfiguration
from sila_cetoni.application.system import ApplicationSystem, CetoniApplicationSystem
from sila_cetoni.utils import PropertyUpdater, negate

from ..generated.syringeconfigurationcontroller import (
    SetSyringeParameters_Responses,
    SyringeConfigurationControllerBase,
    SyringeConfigurationControllerFeature,
)

logger = logging.getLogger(__name__)


@CetoniApplicationSystem.monitor_traffic
class SyringeConfigurationControllerImpl(SyringeConfigurationControllerBase):
    __pump: Pump
    __system: ApplicationSystem
    __config: ServerConfiguration

    def __init__(self, server: SilaServer, pump: Pump):
        super().__init__(server)
        self.__pump = pump
        self.__system = ApplicationSystem()
        self.__config = ServerConfiguration(self.parent_server.server_name, self.__system.device_config.name)

        try:
            self.SetSyringeParameters(
                float(self.__config["pump"]["inner_diameter"]),
                float(self.__config["pump"]["max_piston_stroke"]),
                metadata={},
            )
        except KeyError as err:
            logger.warning(f"Restoring syringe parameters failed - could not read {err!r} value from config file!")

        not_close = negate(math.isclose)

        self.run_periodically(
            PropertyUpdater(
                lambda: self.__pump.get_syringe_param().inner_diameter_mm,
                not_close,
                self.update_InnerDiameter,
                when=self.__system.state.is_operational,
            )
        )
        self.run_periodically(
            PropertyUpdater(
                lambda: self.__pump.get_syringe_param().max_piston_stroke_mm,
                not_close,
                self.update_MaxPistonStroke,
                when=self.__system.state.is_operational,
            )
        )

    def update_InnerDiameter(self, InnerDiameter: float, queue: Optional[Queue[float]] = None) -> None:
        self.__config["pump"]["inner_diameter"] = str(InnerDiameter)
        self.__config.write()
        super().update_InnerDiameter(InnerDiameter, queue)

    def update_MaxPistonStroke(self, MaxPistonStroke: float, queue: Optional[Queue[float]] = None) -> None:
        self.__config["pump"]["max_piston_stroke"] = str(MaxPistonStroke)
        self.__config.write()
        super().update_MaxPistonStroke(MaxPistonStroke, queue)

    @ApplicationSystem.ensure_operational(SyringeConfigurationControllerFeature)
    def SetSyringeParameters(
        self, InnerDiameter: float, MaxPistonStroke: float, *, metadata: MetadataDict
    ) -> SetSyringeParameters_Responses:
        def _validate(value: float, parameter: str, parameter_id: int):
            if value < 0:
                err = ValidationError(f"The {parameter} ({value}) is invalid. It cannot be less than 0!")
                err.parameter_fully_qualified_identifier = (
                    SyringeConfigurationControllerFeature["SetSyringeParameters"]
                    .parameters.fields[parameter_id]
                    .fully_qualified_identifier
                )
                raise err

        _validate(InnerDiameter, "InnerDiameter", 0)
        _validate(MaxPistonStroke, "MaxPistonStroke", 1)
        self.__pump.set_syringe_param(InnerDiameter, MaxPistonStroke)
